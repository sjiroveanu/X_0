; memorez x sau 0 intr un vector
; to do sa resetez jocul din control -> readuc vectorul la starea initiala
;->sa nu pot modifica x sau 0
.386
.model flat, stdcall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;includem biblioteci, si declaram ce functii vrem sa importam
includelib msvcrt.lib
extern exit: proc
extern malloc: proc
extern memset: proc
extern printf: proc

includelib canvas.lib
extern BeginDrawing: proc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;declaram simbolul start ca public - de acolo incepe executia
public start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;sectiunile programului, date, respectiv cod
.data
;aici declaram date
window_title DB "Exemplu proiect desenare",0
area_width EQU 640
area_height EQU 480
area DD 0

format db "%d ", 0
whichArea DD 0
castigator DD 0
array DD -3,-4,-5,-6,-7,-8,-9,-10,-11	
Clicks DD 0;
counter DD 0 ; numara evenimentele de tip timer
mesaj_castigator db "URAA ai castigat ", 0
mesaj_remiza db "  ", 0
mesaj_test db "test/test/test/test/test/test", 0

arg1 EQU 8
arg2 EQU 12
arg3 EQU 16
arg4 EQU 20

symbol_width EQU 10
symbol_height EQU 20
include digits.inc
include letters.inc

.code
; procedura make_text afiseaza o litera sau o cifra la coordonatele date
; arg1 - simbolul de afisat (litera sau cifra)
; arg2 - pointer la vectorul de pixeli
; arg3 - pos_x
; arg4 - pos_y
make_text proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0FFFFFFh
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text endp

; un macro ca sa apelam mai usor desenarea simbolului
make_text_macro macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text
	add esp, 16
endm

isEndedProcedure proc
	push ebp
	mov ebp, esp
	sub esp, 0
	push ebx
	mov ecx, array[0]
	mov edx, array[4]
	cmp ecx, edx
	je hline1
	jmp hline2
hline1:
	mov ecx,  array[4]
	mov edx,  array[8]
	cmp ecx, edx
	mov ebx, ecx
	je afiseaza_castigator
	jmp hline2
hline2:
	mov ecx, array[12]
	mov edx, array[16]
	cmp ecx, edx
	je hline2_next2
	jmp hline3
hline2_next2:
	mov ecx, array[16]
	mov edx, array[20]
	cmp ecx, edx
	mov ebx, ecx
	je afiseaza_castigator
	jmp hline3
hline3:
	mov ecx, array[24]
	mov edx, array[28]
	cmp ecx, edx
	je hline3_next3
	jmp vline1
hline3_next3:
	mov ecx, array[28]
	mov edx, array[32]
	cmp ecx, edx
	mov ebx, ecx
	je afiseaza_castigator
	jmp vline1
vline1:
	mov ecx, array[0]
	mov edx, array[12]
	cmp ecx, edx
	je vline1_next1
	jmp vline2
vline1_next1:
	mov ecx, array[12]
	mov edx, array[24]
	cmp ecx, edx
	mov ebx, ecx
	je afiseaza_castigator
	jmp vline2
vline2:
	mov ecx, array[4]
	mov edx, array[16]
	cmp ecx, edx
	je vline2_next2
	jmp vline3
vline2_next2:
	mov ecx, array[16]
	mov edx, array[28]
	cmp ecx, edx
	mov ebx, ecx
	je afiseaza_castigator
	jmp vline3
vline3:
	mov ecx, array[8]
	mov edx, array[20]
	cmp ecx, edx
	je vline3_next3
	jmp diag1
vline3_next3:
	mov ecx, array[20]
	mov edx, array[32]
	cmp ecx, edx
	mov ebx, ecx
	je afiseaza_castigator
	jmp diag1
diag1:
	mov ecx, array[0]
	mov edx, array[16]
	cmp ecx, edx
	je diag1_next1
	jmp diag2
diag1_next1:
	mov ecx, array[16]
	mov edx, array[32]
	cmp ecx, edx
	mov ebx, ecx
	je afiseaza_castigator
	jmp diag2
diag2:
	 mov ecx, array[8]
	 mov edx, array[16]
	 cmp ecx, edx
	 je diag2_next2
	 ; mov ebx, 101
	 jmp remiza
diag2_next2:
	 mov ecx, array[16]
	 mov edx, array[24]
	 cmp ecx, edx
	 je afiseaza_castigator
	 ; mov ebx, 101
	 jmp remiza
afiseaza_castigator:
	push offset mesaj_castigator
	call printf
	add esp, 4
	push ebx
	push offset format
	call printf
	add esp,8
	 make_text_macro 'J', area, 120, 240
	 make_text_macro 'U', area, 140, 240
	 make_text_macro 'C', area, 160, 240
	 make_text_macro 'A', area, 180, 240
	 make_text_macro 'T', area, 200, 240
	 make_text_macro 'O', area, 220, 240
	 make_text_macro 'R', area, 240, 240
	 make_text_macro 'U', area, 260, 240
	 make_text_macro 'L', area, 280, 240
	 mov castigator, 1
	 cmp ebx,1
	 je part2
	 	make_text_macro '2', area, 320, 240
		make_text_macro 'A', area, 360, 240
		make_text_macro 'C', area, 400, 240
		make_text_macro 'A', area, 420, 240
		make_text_macro 'S', area, 440, 240
		make_text_macro 'T', area, 460, 240
		make_text_macro 'I', area, 480, 240
		make_text_macro 'G', area, 500, 240
		make_text_macro 'A', area, 520, 240
		make_text_macro 'T', area, 540, 240
		jmp iesi
	 
	 
	part2:
	 	make_text_macro '1', area, 320, 240
		make_text_macro 'A', area, 360, 240
		make_text_macro 'C', area, 400, 240
		make_text_macro 'A', area, 420, 240
		make_text_macro 'S', area, 460, 240
		make_text_macro 'T', area, 480, 240
		make_text_macro 'I', area, 500, 240
		make_text_macro 'G', area, 520, 240
		make_text_macro 'A', area, 540, 240
		make_text_macro 'T', area, 560, 240
remiza:
	push ebx
	push offset format
	call printf
	add esp,8
	push offset mesaj_remiza
	call printf
	add esp, 4
	jmp iesi
iesi:
	mov esp, ebp
	pop ebp
	ret
isEndedProcedure endp

isEqualProcedure proc
	push ebp
	mov ebp, esp
	sub esp, 0
	push edx
	mov edx, ecx
	push ebx
	mov ecx, 9
	verificare_sir:
		push ecx
		mov ebx, array[ecx * 4]
		cmp ebx , 0
		jl exit_procedure
		pop ecx
	loop verificare_sir
	pop ebx
	mov ecx, edx
	pop edx
	cmp castigator, 1
	je exit_procedure
		make_text_macro 'R', area, 260, 240
		make_text_macro 'E', area, 280, 240
		make_text_macro 'M', area, 300, 240
		make_text_macro 'I', area, 320, 240
		make_text_macro 'Z', area, 340, 240
		make_text_macro 'A', area, 360, 240
	add esp, 8
	
exit_procedure:
	mov esp, ebp
	pop ebp
	ret
isEqualProcedure endp

WhetherXor0 macro ClicksNumber, x, y, whichArea
local par
local cat1
local cat2
	push ecx
	mov ecx, ClicksNumber
	test ecx, 1
	pop ecx
	jz par
	mov edx, whichArea
	mov array[edx * 4], 1
	; push edx
	; mov edx, ecx
	; mov ecx, 8
	; cat1:
		; push ecx
		; push array[ecx * 4]
		; push offset format
		; call printf
		; add esp, 8
		; pop ecx
	; loop cat1
	; mov ecx, edx	
	; pop edx
	make_text_macro 'X', area, x, y
	call isEndedProcedure
	call isEqualProcedure
	jmp afisare_litere
par:
	mov edx, whichArea
	mov array[edx * 4], 2
	; push edx
	; mov edx, ecx
	; mov ecx, 8
	; cat2:
		; push ecx
		; push array[ecx * 4]
		; push offset format
		; call printf
		; add esp, 8
		; pop ecx
	; loop cat2
	; mov ecx, edx
	; pop edx
	
	make_text_macro 'O', area, x, y
	call isEndedProcedure
	call isEqualProcedure
	jmp afisare_litere
endm 



line_horizontal macro x, y, len, color
local cat_timp
	mov eax, y
	mov ebx, area_width
	mul ebx
	add eax, x
	shl eax, 2
	add eax, area
	mov ecx, len
	cat_timp:
	mov dword ptr[eax], color
	add eax, 4
	loop cat_timp 
endm

line_vertical macro x, y, len, color
local cat_timp
	mov eax, y
	mov ebx, area_width
	mul ebx
	add eax, x
	shl eax, 2
	add eax, area
	mov ecx, len
	cat_timp:
	mov dword ptr[eax], color
	add eax, 4*area_width
	loop cat_timp
	
	
	 
endm

; functia de desenare - se apeleaza la fiecare click
; sau la fiecare interval de 200ms in care nu s-a dat click
; arg1 - evt (0 - initializare, 1 - click, 2 - s-a scurs intervalul fara click, 3 - s-a apasat o tasta)
; arg2 - x (in cazul apasarii unei taste, x contine codul ascii al tastei care a fost apasata)
; arg3 - y
draw proc
	push ebp
	mov ebp, esp
	pusha
	maca:
	mov eax, [ebp+arg1]
	cmp eax, 1
	jz evt_click
	cmp eax, 2
	 jz evt_timer ; nu s-a efectuat click pe nimic
	;mai jos e codul care intializeaza fereastra cu pixeli albi
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	push 255
	push area
	call memset
	add esp, 12
	jmp afisare_litere
	
evt_click:
area_1:
	mov whichArea, 0
	mov eax, [ebp + arg2]
	cmp eax, 212
	jg area_2
	mov eax, [ebp + arg3]
	cmp eax, 160
	jg area_4
	inc Clicks
	WhetherXor0 Clicks, 100, 120, whichArea
	; test Clicks, 1
	; jz eO
	; mov array[0] , 1
	jmp area_2
; eO:
	; mov array[0], 2
	; make_text_macro 'Z', area, 120, 100
	; make_text_macro 'O', area, 140, 100
	; make_text_macro 'N', area, 160, 100
	; make_text_macro 'A', area, 180, 100
	; make_text_macro '1', area, 200, 100
	; jmp afisare_xd
	
area_2:
	mov whichArea, 1
	mov eax, [ebp + arg2]
	cmp eax,424
	jg area_3
	mov eax, [ebp + arg3]
	cmp eax, 160
	jg area_5
	inc Clicks
	WhetherXor0 Clicks, 300, 120, whichArea
	; test Clicks, 1
	; jz eO2
	; mov array[1], 1
	jmp area_3
; eO2:
	; mov array[1], 2
	; make_text_macro 'Z', area, 220, 100
	; make_text_macro 'O', area, 240, 100
	; make_text_macro 'N', area, 260, 100
	; make_text_macro 'A', area, 280, 100
	; make_text_macro '2', area, 300, 100
	; jmp afisare_xd
area_3:
	mov whichArea, 2
	mov eax, [ebp + arg3]
	cmp eax, 160
	jg area_6
	inc Clicks
	WhetherXor0 Clicks, 500, 120, whichArea
	; test Clicks, 1
	; jz eO3
	; mov array[2], 1
	jmp area_4
; eO3:
	; mov array[2], 2
		; make_text_macro 'Z', area, 420, 100
	; make_text_macro 'O', area, 440, 100
	; make_text_macro 'N', area, 460, 100
	; make_text_macro 'A', area, 480, 100
	; make_text_macro '3', area, 500, 100
	; jmp afisare_xd
	
area_4:
	mov whichArea, 3
	mov eax, [ebp + arg2]
	cmp eax,212
	jg area_5
	mov eax, [ebp + arg3]
	cmp eax, 320
	jg area_7
	inc Clicks
	WhetherXor0 Clicks, 100, 250, whichArea
	; test Clicks, 1
	; jz eO4
	; mov array[3], 1
	jmp area_5
; eO4:
	; mov array[3], 2
	; make_text_macro 'Z', area, 100, 200
	; make_text_macro 'O', area, 120, 200
	; make_text_macro 'N', area, 140, 200
	; make_text_macro 'A', area, 160, 200
	; make_text_macro '4', area, 200, 200
	; jmp afisare_xd
area_5:
	mov whichArea, 4
	mov eax, [ebp + arg2]
	cmp eax,424
	jg area_6
	mov eax, [ebp + arg3]
	cmp eax, 320
	jg area_7
	inc Clicks
	WhetherXor0 Clicks, 300, 250, whichArea
	; test Clicks, 1
	; jz eO5
	; mov array[4], 1
	jmp area_6
; eO5:
	; mov array[4], 2
	; make_text_macro 'Z', area, 220, 200
	; make_text_macro 'O', area, 240, 200
	; make_text_macro 'N', area, 260, 200
	; make_text_macro 'A', area, 280, 200
	; make_text_macro '5', area, 300, 200
	; jmp afisare_xd

area_6:
	mov whichArea, 5
	mov eax, [ebp + arg3]
	cmp eax, 320
	jg area_9
	inc Clicks
	WhetherXor0 Clicks, 500, 250, whichArea
	; test Clicks, 1
	; jz eO6
	; mov array[5], 1
	jmp area_7
; eO6:
	; mov array[5], 2
		; make_text_macro 'Z', area, 420, 200
	; make_text_macro 'O', area, 440, 200
	; make_text_macro 'N', area, 460, 200
	; make_text_macro 'A', area, 480, 200
	; make_text_macro '6', area, 500, 200

	; jmp afisare_xd
area_7:
	mov whichArea, 6
	mov eax, [ebp + arg2]
	cmp eax, 212
	jg area_8
	mov eax, [ebp + arg3]
	cmp eax, 480 
	jg area_1
	inc Clicks
	WhetherXor0 Clicks, 100, 450, whichArea
	; test Clicks, 1
	; jz eO7
	; mov array[6], 1
	jmp area_8
; eO7:
	; mov array[6], 2
	; make_text_macro 'Z', area, 120, 400
	; make_text_macro 'O', area, 140, 400
	; make_text_macro 'N', area, 160, 400
	; make_text_macro 'A', area, 180, 400
	; make_text_macro '7', area, 200, 400
	; jmp afisare_xd
area_8:
	mov whichArea, 7
	mov eax, [ebp + arg2]
	cmp eax, 424
	jg area_3
	mov eax, [ebp + arg3]
	cmp eax, 480
	jg area_1
	inc Clicks
	WhetherXor0 Clicks, 300, 450, whichArea
	; test Clicks, 1
	; jz eO8
	; mov array[7], 1
	jmp area_9
; eO8:
	; mov array[7], 2
	; make_text_macro 'Z', area, 220, 400
	; make_text_macro 'O', area, 240, 400
	; make_text_macro 'N', area, 260, 400
	; make_text_macro 'A', area, 280, 400
	; make_text_macro '8', area, 300, 400
	; jmp afisare_xd
area_9:
	mov whichArea, 8
	mov eax, [ebp + arg3]
	cmp eax, 480
	jg area_1
	inc Clicks
	WhetherXor0 Clicks, 500, 450, whichArea
	; test Clicks, 1
	; jz eO9
	; mov array[8], 1
	jmp area_1
; eO9:
	; mov array[8], 2
	; make_text_macro 'Z', area, 420, 400
	; make_text_macro 'O', area, 440, 400
	; make_text_macro 'N', area, 460, 400
	; make_text_macro 'A', area, 480, 400
	; make_text_macro '9', area, 500, 400
	; jmp afisare_xd
afisare_xd:
	jmp afisare_litere
	
evt_timer:
	inc counter
	
afisare_litere:
	;afisam valoarea counter-ului curent (sute, zeci si unitati)
	mov ebx, 10
	mov eax, counter
	;cifra unitatilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 30, 10
	;cifra zecilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 20, 10
	;cifra sutelor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 10, 10
	; ;scriem un mesaj
	; make_text_macro 'X', area, 50, 100
	
	; make_text_macro 'S', area, 100, 100
	; make_text_macro 'I', area, 120, 100
	
	; make_text_macro '0', area, 170, 100
	line_vertical 212 ,0, 480 , 000000h
	line_vertical 424 , 0, 480 , 000000h
	line_horizontal 0 ,320, 640 , 000000h
	line_horizontal 0 , 160, 640 , 000000h
final_draw:
	popa
	mov esp, ebp
	pop ebp
	ret
draw endp

start:
	;alocam memorie pentru zona de desenat
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	call malloc
	add esp, 4
	mov area, eax
	;apelam functia de desenare a ferestrei
	; typedef void (*DrawFunc)(int evt, int x, int y);
	; void __cdecl BeginDrawing(const char *title, int width, int height, unsigned int *area, DrawFunc draw);
	push offset draw
	push area
	push area_height
	push area_width
	push offset window_title
	call BeginDrawing
	add esp, 20
	
	;terminarea programului
	push 0  
	call exit
end start
